8.6 convert infix expressions to postfix expression and evaluate the postfix expression
8.6 When an operand is entered, the computer<br>Pushes it onto a stack<br>When an operator is entered, the computer<br>Applies it to the top two operands of the stack<br>Pops the operands from the stack<br>Pushes the result of the operation onto the stack
8.6 Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.
8.6 infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)
8.6 they are transformed into post-fix expressions, then evaluated with a stack.
8.6 Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in "a + b").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written "+ a b".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written "a b +".  (You may have seen this as "reverse Polish notation".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations.<br>
