9.4 Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)
9.4 remove the first element and reference the second element as the new head of the list. 
9.4 By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.
9.4 you would have your list and add a back pointer so that your program knows where the end is
9.4 your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list
9.4       temp-&gt;next= NULL;<br>      if (front)  { (rear) -&gt; next= temp;}<br>      else front = temp;<br>      rear = temp;   }<br>
